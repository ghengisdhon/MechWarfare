#ifndef mechGlobal_h
#define mechGlobal_h

/****************************************************************************************/
/* Misc Global Declarations                                                             */
/****************************************************************************************/
//Declare Timer for use with ISR
HardwareTimer Timer(TimerNumber);

// Create a Circular Buffer to Hold Rx Comm Messages
CircularBuffer<byte, 32> comRxHostBuffer;

/****************************************************************************************/
/* Mech Global Variable Structure Definition                                            */
/****************************************************************************************/
typedef struct {
  float     bodyHeight            =  0.0F;                    // Body Height (in)
  float     bodyHeightHop         =  0.0F;                    // Body Shoulder Joint Compliance Cancellation (in)
  float     bodyHeightMax         =  0.75F;                   // Body Height Max (in)
  float     bodyHeightMin         = -1.00F;                   // Body Height Min (in)
  float     bodyHeightRateMag     =  0.05F;                   // Body Height Rate (in/cycle)
  float     bodyHeightRateMult    =  0.0F;                    // Body Height Rate Multiplier
  float     bodyPitch             =  0.0F;                    // Body Pitch (rad)
  float     bodyPitchMax          =  5 * 0.017453292519943F;  // Body Pitch Max (rad)
  float     bodyPitchMin          = -10 * 0.017453292519943F;  // Body Pitch Min (rad)
  float     bodyPitchMaxDefault   =  5 * 0.017453292519943F;  // Body Pitch Max (rad)
  float     bodyPitchMinDefault   = -10 * 0.017453292519943F;  // Body Pitch Min (rad)
  float     bodyPitchRateMag      =  0.01F;                  // Body Pitch Rate (rad/cycle)
  float     bodyPitchRateMult     =  0.01F;                    // Body Pitch Rate Multiplier 
  float     bodyYaw               =  0.0F;                    // Body Yaw (rad)
  float     bodyYawMax            =  10 * 0.017453292519943F; // Body Yaw Max (rad)
  float     bodyYawMin            = -10 * 0.017453292519943F; // Body Yaw Min (rad)
  float     bodyYawRateMag        =  0.005F;                  // Body Yaw Rate Magnitude (rad/cycle)
  float     bodyYawRateMult       =  0.0F;                    // Body Pitch Rate Multiplier
  byte      commRxLE3DtMsg[sizeRxLE3DMsg];
  float     commWDT               =  0U;                  // Comm Watch Dog Timer
  float     fTheta0[3]            =  {0, 0, 0};           // Leg 0 Angles (rad)
  float     fTheta1[3]            =  {0, 0, 0};           // Leg 1 Angles (rad)
  float     fTheta2[3]            =  {0, 0, 0};           // Leg 2 Angles (rad)
  float     fTheta3[3]            =  {0, 0, 0};           // Leg 3 Angles (rad)
  byte      gaitCmdState          =  0;
  float     gaitDelx              =  0.0F;                // Gait delta x (inch)
  float     gaitDelxMult          =  0.0F;                // Gait delta x multiplier
  float     gaitDelxFMag          =  0.3F;                // Gait delta x multiplier magnitude - Forward Direction
  float     gaitDelxBMag          =  0.3F;                // Gait delta x multiplier magnitude - Backward Direction
  float     gaitDely              =  0.0F;                // Gait delta y (inch)
  float     gaitDelyMult          =  0.0F;                // Gait delta y multiplier
  float     gaitDelyMag           =  0.3F;                // Gait delta y multiplier magnitude
  float     gaitDelyaw            =  0.0F;                // Gait delta yaw (rad)
  float     gaitDelyawMult        =  0.0F;                // Gait delta yaw multiplier
  float     gaitDelyawMag         =  0.034906585039887F;  // Gait delta yaw multiplier magnitude
  int       gaitVectorSize        =  64;                  // Gait Step Vector Size
  unsigned  gaitStepIncrement     = 1U;
  int       gaitIdx               =  0;                   // Gait Step Vector Index
  float     gaitState             =  2.0F;                // Gait State
  float     gaitStepFilt          =  0.0F;                // Gait Step Filter
  float     gaitStepFiltzK0       =  0.0F;                // Gait Step Filter Output(k)
  float     gaitStepFiltzK1       =  0.0F;                // Gait Step Filter Output(k-1)
  float     gaitStepFiltzu        =  0.0F;                // Gait Step Filter Input(k)
  float     gaitStepHeight        =  0.25F;               // Gait Step Height (in)
  float     gaitStepHeightDefault =  StepHeight2;         // Gait Step Height Default (in)
  float     gaitStepHeightMax     =  0.25F;               // Gait Max Step Height (in)
  float     gaitStepHeightMin     =  0.0F;                // Gait Min Step Height (in)
  float     gaitStepHeightRate    =  0.01F;               // Gait Step Height Rate (in/cycle)
  float     gaitStepSize          =  uStepSize2;          // Gait Step Size Multiplier
  byte      gunCommInstruction    =  0U;                  // Gun SPI Bus Instruction
  byte      meleeState            =  0U;                  // Melee Weapon Engage
  byte      meleeStatePrev        =  0U;                  // Melee Weapon Engage State
  int       powrMainCnts          =  0;                   // Main Battery Voltage (counts)
  float     powrMainVolt          =  0;                   // Main Battery Voltage (Voltage)
  boolean   TargetFrontFlag       = false;
  boolean   TargetLeftFlag        = false;
  boolean   TargetRearFlag        = false;
  boolean   TargetRightFlag       = false;
//  int       turretPitch           =  2047;                // Turret Pitch Postion (counts)
//  int       turretYaw             =  2047;                // Turret Yaw Postion (counts)
//  unsigned  uTheta0[3]            = {2045, 1441, 2522};   // Leg 0 Angles (counts)
//  unsigned  uTheta1[3]            = {2045, 1441, 2522};   // Leg 1 Angles (counts)
//  unsigned  uTheta2[3]            = {2045, 1441, 2522};   // Leg 2 Angles (counts)
//  unsigned  uTheta3[3]            = {2045, 1441, 2522};   // Leg 3 Angles (counts)
  int       turretPitch           =  512;                // Turret Pitch Postion (counts)
  int       turretYaw             =  512;                // Turret Yaw Postion (counts)
  unsigned  uTheta0[3]            = {512, 512, 512};   // Leg 0 Angles (counts)
  unsigned  uTheta1[3]            = {512, 512, 512};   // Leg 1 Angles (counts)
  unsigned  uTheta2[3]            = {512, 512, 512};   // Leg 2 Angles (counts)
  unsigned  uTheta3[3]            = {512, 512, 512};   // Leg 3 Angles (counts)
} struct_mech;

struct_mech mechGV;

/****************************************************************************************/
/* Mech Global Variable Structure Definition                                            */
/****************************************************************************************/
typedef struct {
//  float     JoyStickDZ        =  0.0625F;             // Comm Joystick Dead Zone
  float     JoyStickDZ        =  0.125F;             // Comm Joystick Dead Zone
  float     LeftJoystickLR    =  0.0F;                // Comm Left Joystick Left/Right Button
  float     LeftJoystickUD    =  0.0F;                // Comm Left Joystick Up/Down Button
  float     RightJoystickLR   =  0.0F;                // Comm Right Joystick Left/Right Button
  float     RightJoystickUD   =  0.0F;                // Comm Right Joystick Up/Down Button
  
  unsigned  Buttons1              =  0;               // 
  unsigned  Buttons2              =  0;               // 
  byte      buttonJ2              =  0;               // 
  byte      buttonJ1              =  0;               // 
  byte      buttonSelect          =  0;               // 
  byte      buttonStart           =  0;               // 
  byte      buttonUp              =  0;               // 
  byte      buttonLeft            =  0;               // 
  byte      buttonDown            =  0;               // 
  byte      buttonRight           =  0;               // 
  byte      button1               =  0;               // 
  byte      buttons               =  0;               // 
  byte      button4               =  0;               // 
  byte      button2               =  0;               // 
  byte      button3               =  0;               // 
  byte      buttonRZ1             =  0;               // 
  byte      buttonRZ2             =  0;               // 
  byte      buttonLZ1             =  0;               // 
  byte      buttonLZ2             =  0;               // 
  byte      commRxMsg[sizeRxDFRobotMsg];              // 
} struct_dfrobot;

struct_dfrobot dfrbGV;

/****************************************************************************************/
/* Mech Global Variable Structure Definition                                            */
/****************************************************************************************/
typedef struct {
    byte      ButtonsA        = 0;               // 
    byte      ButtonsB        = 0;               // 
    byte      ButtonsC        = 0;               // 
    float     JoystickX       = 0.0F;            // 
    byte      JoystickXLo     = 0;               // 
    byte      JoystickXHi     = 0;               // 
    float     JoystickY       = 0.0F;            // 
    byte      JoystickYLo     = 0;               // 
    byte      JoystickYHi     = 0;               // 
    byte      JoystickTwist   = 0;               // 
    byte      JoystickHat     = 0;               // 
    byte      JoystickSlider  = 0;               // 
    byte      Spare12         = 0;               // 
    byte      Spare13         = 0;               // 
    byte      Spare14         = 0;               // 
    byte      Spare15         = 0;               // 
    byte      Spare16         = 0;               // 
    byte      Spare17         = 0;               // 
    byte      Spare18         = 0;               // 
    byte      Spare19         = 0;               // 
    byte      Spare20         = 0;               // 
    byte      Spare21         = 0;               // 
    byte      Spare22         = 0;               // 
    byte      Spare23         = 0;               // 

    byte      Trigger         = 0;               // 
    byte      Trigger2        = 0;               // 
    byte      LLJoyButton     = 0;               // 
    byte      LRJoyButton     = 0;               // 
    byte      ULJoyButton     = 0;               // 
    byte      URJoyButton     = 0;               // 
    byte      ULBaseButton    = 0;               // 
    byte      URBaseButton    = 0;               // 
  
    byte      MLBaseButton    = 0;               // 
    byte      MRBaseButton    = 0;               // 
    byte      LLBaseButton    = 0;               // 
    byte      LRBaseButton    = 0;               // 
    byte      SpareButton     = 0;               // 
    byte      Spare11Button   = 0;               // 
    byte      Spare10Button   = 0;               // 
    byte      Spare9Button    = 0;               // 
  
    byte      Spare8Button    = 0;               // 
    byte      Spare7Button    = 0;               // 
    byte      Spare6Button    = 0;               // 
    byte      Spare5Button    = 0;               // 
    byte      Spare4Button    = 0;               // 
    byte      Spare3Button    = 0;               // 
    byte      Spare2Button    = 0;               // 
    byte      Spare1Button    = 0;               // 
    
    byte      commRxMsg[sizeRxLE3DMsg];          // 

    float     JoyStickDZ      =  0.0625F;        // Comm Joystick Dead Zone
} struct_le3d;

struct_le3d le3dGV;

/****************************************************************************************/
/* Mech Gait Initializations                                                            */
/****************************************************************************************/

// Leg Angle Initializations

unsigned int uTheta0_AX12[3];
unsigned int uTheta1_AX12[3];
unsigned int uTheta2_AX12[3];
unsigned int uTheta3_AX12[3];

// Shoulder "Home" x,y,z Locations [Body Center] (in)
float cos45 = cos(45 * D2R);
float sin45 = sin(45 * D2R);
float XSH[4] = { +cos45  * RSHF, -cos45  * RSHR, -cos45  * RSHR, +cos45  * RSHF};
float YSH[4] = { +sin45  * RSHF, +sin45  * RSHR, -sin45  * RSHR, -sin45  * RSHF};
float ZSH[4] = { HSHF,  HSHR,  HSHR,  HSHF};

// Gait State 1
float cosS1LF = cos(45 * D2R);
float sinS1LF = sin(45 * D2R);
float cosS1LR = cos(45 * D2R);
float sinS1LR = sin(45 * D2R);
float cosS1RR = cos(45 * D2R);
float sinS1RR = sin(45 * D2R);
float cosS1RF = cos(45 * D2R);
float sinS1RF = sin(45 * D2R);

float XFTS1[4] = {XSH[0] + cosS1LF * LFTF, XSH[1] - cosS1LR * LFTR, XSH[2] - cosS1RR * LFTR, XSH[3] + cosS1RF * LFTF};
float YFTS1[4] = {YSH[0] + sinS1LF * LFTF, YSH[1] + sinS1LR * LFTR, YSH[2] - sinS1RR * LFTR, YSH[3] - sinS1RF * LFTF};
float ZFTS1[4] = {0.0F, 0.0F, 0.0F, 0.0F};

// Gait State 2
float cosS2 = cos(45 * D2R);
float sinS2 = sin(45 * D2R);
float XFTS2[4] = {XSH[0] + cosS2 * LFTF, XSH[1] - cosS2 * LFTR, XSH[2] - cosS2 * LFTR, XSH[3] + cosS2 * LFTF};
float YFTS2[4] = {YSH[0] + sinS2 * LFTF, YSH[1] + sinS2 * LFTR, YSH[2] - sinS2 * LFTR, YSH[3] - sinS2 * LFTF};
float ZFTS2[4] = {0.0F, 0.0F, 0.0F, 0.0F};

// Gait State 3
float cosS3 = cos(45 * D2R);
float sinS3 = sin(45 * D2R);
float XFTS3[4] = {XSH[0] + cosS3 * LFTF, XSH[1] - cosS3 * LFTR, XSH[2] - cosS3 * LFTR, XSH[3] + cosS3 * LFTF};
float YFTS3[4] = {YSH[0] + sinS3 * LFTF, YSH[1] + sinS3 * LFTR, YSH[2] - sinS3 * LFTR, YSH[3] - sinS3 * LFTF};
float ZFTS3[4] = {0.0F, 0.0F, 0.0F, 0.0F};

// Gait State 4
float cosS4F = cos(45 * D2R);
float sinS4F = sin(45 * D2R);
float cosS4R = cos(45 * D2R);
float sinS4R = sin(45 * D2R);

float XFTS4[4] = {XSH[0] + cosS4F * LFTF, XSH[1] - cosS4R * LFTR, XSH[2] - cosS4R * LFTR, XSH[3] + cosS4F * LFTF};
float YFTS4[4] = {YSH[0] + sinS4F * LFTF, YSH[1] + sinS4R * LFTR, YSH[2] - sinS4R * LFTR, YSH[3] - sinS4F * LFTF};
float ZFTS4[4] = {0.0F, 0.0F, 0.0F, 0.0F};

// Active State 4
float XFT[4];
float YFT[4];
float ZFT[4];
int   sizeXFT = sizeof(XFT);
int   sizeYFT = sizeof(YFT);
int   sizeZFT = sizeof(ZFT);

float delxyLF_vec[64];
float delxyLR_vec[64];
float delxyRR_vec[64];
float delxyRF_vec[64];
int   sizedelxy = sizeof(delxyLF_vec);

float delyawLF_vec[64];
float delyawLR_vec[64];
float delyawRR_vec[64];
float delyawRF_vec[64];
int   sizedelyaw = sizeof(delyawLF_vec);

float delzLF_vec[64];
float delzLR_vec[64];
float delzRR_vec[64];
float delzRF_vec[64];
int   sizedelz = sizeof(delzLF_vec);

float delzadj_vec[64];
int   sizedelzadj = sizeof(delzadj_vec);

/****************************************************************************************/
/****************************************************************************************/
/* Mech Gait  Step Location Vector Definitions                                          */
/****************************************************************************************/
/****************************************************************************************/
/* Single Step Walking Gait Step Location Vectors - Length 64                           */
/****************************************************************************************/
// Walking Gait Step Location Vectors - Length 64
// Used for Smoother Gait Steps

// Still Needs work !!!!!!!!!!!!!!

const PROGMEM float delxy1_S1_vec[64] = {
  +2.00000, +1.91667, +1.83333, +1.75000, +1.66667, +1.58333, +1.50000, +1.41667,
  +1.33333, +1.25000, +1.16667, +1.08333, +1.00000, +0.91667, +0.83333, +0.75000,
  +0.66667, +0.58333, +0.50000, +0.41667, +0.33333, +0.25000, +0.16667, +0.08333,
  +0.00000, -0.08333, -0.16667, -0.25000, -0.33333, -0.41667, -0.50000, -0.58333,
  -0.66667, -0.75000, -0.83333, -0.91667, -1.00000, -1.08333, -1.16667, -1.25000,
  -1.33333, -1.41667, -1.50000, -1.58333, -1.66667, -1.75000, -1.83333, -1.91667,
  -2.00000, -2.00000, -2.00000, -1.66667, -1.33333, -1.00000, -0.66667, -0.33333,
  +0.00000, +0.33333, +0.66667, +1.00000, +1.33333, +1.66667, +2.00000, +2.00000
};

const PROGMEM float delxy2_S1_vec[64] = {
  +0.66667, +0.58333, +0.50000, +0.41667, +0.33333, +0.25000, +0.16667, +0.08333,
  +0.00000, -0.08333, -0.16667, -0.25000, -0.33333, -0.41667, -0.50000, -0.58333,
  -0.66667, -0.75000, -0.83333, -0.91667, -1.00000, -1.08333, -1.16667, -1.25000,
  -1.33333, -1.41667, -1.50000, -1.58333, -1.66667, -1.75000, -1.83333, -1.91667,
  -2.00000, -2.00000, -2.00000, -1.66667, -1.33333, -1.00000, -0.66667, -0.33333,
  +0.00000, +0.33333, +0.66667, +1.00000, +1.33333, +1.66667, +2.00000, +2.00000,
  +2.00000, +1.91667, +1.83333, +1.75000, +1.66667, +1.58333, +1.50000, +1.41667,
  +1.33333, +1.25000, +1.16667, +1.08333, +1.00000, +0.91667, +0.83333, +0.75000
};

const PROGMEM float delxy3_S1_vec[64] = {
  -2.00000, -2.00000, -2.00000, -1.66667, -1.33333, -1.00000, -0.66667, -0.33333,
  +0.00000, +0.33333, +0.66667, +1.00000, +1.33333, +1.66667, +2.00000, +2.00000,
  +2.00000, +1.91667, +1.83333, +1.75000, +1.66667, +1.58333, +1.50000, +1.41667,
  +1.33333, +1.25000, +1.16667, +1.08333, +1.00000, +0.91667, +0.83333, +0.75000,
  +0.66667, +0.58333, +0.50000, +0.41667, +0.33333, +0.25000, +0.16667, +0.08333,
  +0.00000, -0.08333, -0.16667, -0.25000, -0.33333, -0.41667, -0.50000, -0.58333,
  -0.66667, -0.75000, -0.83333, -0.91667, -1.00000, -1.08333, -1.16667, -1.25000,
  -1.33333, -1.41667, -1.50000, -1.58333, -1.66667, -1.75000, -1.83333, -1.91667
};

const PROGMEM float delxy4_S1_vec[64] = {
  -0.66667, -0.75000, -0.83333, -0.91667, -1.00000, -1.08333, -1.16667, -1.25000,
  -1.33333, -1.41667, -1.50000, -1.58333, -1.66667, -1.75000, -1.83333, -1.91667,
  -2.00000, -2.00000, -2.00000, -1.66667, -1.33333, -1.00000, -0.66667, -0.33333,
  +0.00000, +0.33333, +0.66667, +1.00000, +1.33333, +1.66667, +2.00000, +2.00000,
  +2.00000, +1.91667, +1.83333, +1.75000, +1.66667, +1.58333, +1.50000, +1.41667,
  +1.33333, +1.25000, +1.16667, +1.08333, +1.00000, +0.91667, +0.83333, +0.75000,
  +0.66667, +0.58333, +0.50000, +0.41667, +0.33333, +0.25000, +0.16667, +0.08333,
  +0.00000, -0.08333, -0.16667, -0.25000, -0.33333, -0.41667, -0.50000, -0.58333
};

const PROGMEM float delyaw1_S1_vec[64] = {
  +2.00000, +1.91667, +1.83333, +1.75000, +1.66667, +1.58333, +1.50000, +1.41667,
  +1.33333, +1.25000, +1.16667, +1.08333, +1.00000, +0.91667, +0.83333, +0.75000,
  +0.66667, +0.58333, +0.50000, +0.41667, +0.33333, +0.25000, +0.16667, +0.08333,
  +0.00000, -0.08333, -0.16667, -0.25000, -0.33333, -0.41667, -0.50000, -0.58333,
  -0.66667, -0.75000, -0.83333, -0.91667, -1.00000, -1.08333, -1.16667, -1.25000,
  -1.33333, -1.41667, -1.50000, -1.58333, -1.66667, -1.75000, -1.83333, -1.91667,
  -2.00000, -2.00000, -2.00000, -1.66667, -1.33333, -1.00000, -0.66667, -0.33333,
  +0.00000, +0.33333, +0.66667, +1.00000, +1.33333, +1.66667, +2.00000, +2.00000
};

const PROGMEM float delyaw2_S1_vec[64] = {
  +0.66667, +0.58333, +0.50000, +0.41667, +0.33333, +0.25000, +0.16667, +0.08333,
  +0.00000, -0.08333, -0.16667, -0.25000, -0.33333, -0.41667, -0.50000, -0.58333,
  -0.66667, -0.75000, -0.83333, -0.91667, -1.00000, -1.08333, -1.16667, -1.25000,
  -1.33333, -1.41667, -1.50000, -1.58333, -1.66667, -1.75000, -1.83333, -1.91667,
  -2.00000, -2.00000, -2.00000, -1.66667, -1.33333, -1.00000, -0.66667, -0.33333,
  +0.00000, +0.33333, +0.66667, +1.00000, +1.33333, +1.66667, +2.00000, +2.00000,
  +2.00000, +1.91667, +1.83333, +1.75000, +1.66667, +1.58333, +1.50000, +1.41667,
  +1.33333, +1.25000, +1.16667, +1.08333, +1.00000, +0.91667, +0.83333, +0.75000
};

const PROGMEM float delyaw3_S1_vec[64] = {
  -2.00000, -2.00000, -2.00000, -1.66667, -1.33333, -1.00000, -0.66667, -0.33333,
  +0.00000, +0.33333, +0.66667, +1.00000, +1.33333, +1.66667, +2.00000, +2.00000,
  +2.00000, +1.91667, +1.83333, +1.75000, +1.66667, +1.58333, +1.50000, +1.41667,
  +1.33333, +1.25000, +1.16667, +1.08333, +1.00000, +0.91667, +0.83333, +0.75000,
  +0.66667, +0.58333, +0.50000, +0.41667, +0.33333, +0.25000, +0.16667, +0.08333,
  +0.00000, -0.08333, -0.16667, -0.25000, -0.33333, -0.41667, -0.50000, -0.58333,
  -0.66667, -0.75000, -0.83333, -0.91667, -1.00000, -1.08333, -1.16667, -1.25000,
  -1.33333, -1.41667, -1.50000, -1.58333, -1.66667, -1.75000, -1.83333, -1.91667
};

const PROGMEM float delyaw4_S1_vec[64] = {
  -0.66667, -0.75000, -0.83333, -0.91667, -1.00000, -1.08333, -1.16667, -1.25000,
  -1.33333, -1.41667, -1.50000, -1.58333, -1.66667, -1.75000, -1.83333, -1.91667,
  -2.00000, -2.00000, -2.00000, -1.66667, -1.33333, -1.00000, -0.66667, -0.33333,
  +0.00000, +0.33333, +0.66667, +1.00000, +1.33333, +1.66667, +2.00000, +2.00000,
  +2.00000, +1.91667, +1.83333, +1.75000, +1.66667, +1.58333, +1.50000, +1.41667,
  +1.33333, +1.25000, +1.16667, +1.08333, +1.00000, +0.91667, +0.83333, +0.75000,
  +0.66667, +0.58333, +0.50000, +0.41667, +0.33333, +0.25000, +0.16667, +0.08333,
  +0.00000, -0.08333, -0.16667, -0.25000, -0.33333, -0.41667, -0.50000, -0.58333
};

const PROGMEM float delz1_S1_vec[64] = {
  +0.00000, +0.00000, +0.00000, +0.00000, +0.00000, +0.00000, +0.00000, +0.00000,
  +0.00000, +0.00000, +0.00000, +0.00000, +0.00000, +0.00000, +0.00000, +0.00000,
  +0.00000, +0.00000, +0.00000, +0.00000, +0.00000, +0.00000, +0.00000, +0.00000,
  +0.00000, +0.00000, +0.00000, +0.00000, +0.00000, +0.00000, +0.00000, +0.00000,
  +0.00000, +0.00000, +0.00000, +0.00000, +0.00000, +0.00000, +0.00000, +0.00000,
  +0.00000, +0.00000, +0.00000, +0.00000, +0.00000, +0.00000, +0.00000, +0.00000,
  +0.00000, +0.00000, +0.00000, +0.00000, +0.00000, +0.50000, +1.00000, +1.50000,
  +1.83333, +2.00000, +2.00000, +2.00000, +1.66667, +1.00000, +0.16667, +0.00000
};

const PROGMEM float delz2_S1_vec[64] = {
  +0.00000, +0.00000, +0.00000, +0.00000, +0.00000, +0.00000, +0.00000, +0.00000,
  +0.00000, +0.00000, +0.00000, +0.00000, +0.00000, +0.00000, +0.00000, +0.00000,
  +0.00000, +0.00000, +0.00000, +0.00000, +0.00000, +0.00000, +0.00000, +0.00000,
  +0.00000, +0.00000, +0.00000, +0.00000, +0.00000, +0.00000, +0.00000, +0.00000,
  +0.00000, +0.00000, +0.00000, +0.00000, +0.00000, +0.50000, +1.00000, +1.50000,
  +1.83333, +2.00000, +2.00000, +2.00000, +1.66667, +1.00000, +0.16667, +0.00000,
  +0.00000, +0.00000, +0.00000, +0.00000, +0.00000, +0.00000, +0.00000, +0.00000,
  +0.00000, +0.00000, +0.00000, +0.00000, +0.00000, +0.00000, +0.00000, +0.00000
};

const PROGMEM float delz3_S1_vec[64] = {
  +0.00000, +0.00000, +0.00000, +0.00000, +0.00000, +0.50000, +1.00000, +1.50000,
  +1.83333, +2.00000, +2.00000, +2.00000, +1.66667, +1.00000, +0.16667, +0.00000,
  +0.00000, +0.00000, +0.00000, +0.00000, +0.00000, +0.00000, +0.00000, +0.00000,
  +0.00000, +0.00000, +0.00000, +0.00000, +0.00000, +0.00000, +0.00000, +0.00000,
  +0.00000, +0.00000, +0.00000, +0.00000, +0.00000, +0.00000, +0.00000, +0.00000,
  +0.00000, +0.00000, +0.00000, +0.00000, +0.00000, +0.00000, +0.00000, +0.00000,
  +0.00000, +0.00000, +0.00000, +0.00000, +0.00000, +0.00000, +0.00000, +0.00000,
  +0.00000, +0.00000, +0.00000, +0.00000, +0.00000, +0.00000, +0.00000, +0.00000
};

const PROGMEM float delz4_S1_vec[64] = {
  +0.00000, +0.00000, +0.00000, +0.00000, +0.00000, +0.00000, +0.00000, +0.00000,
  +0.00000, +0.00000, +0.00000, +0.00000, +0.00000, +0.00000, +0.00000, +0.00000,
  +0.00000, +0.00000, +0.00000, +0.00000, +0.00000, +0.50000, +1.00000, +1.50000,
  +1.83333, +2.00000, +2.00000, +2.00000, +1.66667, +1.00000, +0.16667, +0.00000,
  +0.00000, +0.00000, +0.00000, +0.00000, +0.00000, +0.00000, +0.00000, +0.00000,
  +0.00000, +0.00000, +0.00000, +0.00000, +0.00000, +0.00000, +0.00000, +0.00000,
  +0.00000, +0.00000, +0.00000, +0.00000, +0.00000, +0.00000, +0.00000, +0.00000,
  +0.00000, +0.00000, +0.00000, +0.00000, +0.00000, +0.00000, +0.00000, +0.00000
};

const PROGMEM float delzadj_S1_vec[64] = {
  +0.00000, +0.00000, +0.00000, +0.00000, +0.00000, +0.00000, +0.00000, +0.00000,
  +0.00000, +0.00000, +0.00000, +0.00000, +0.00000, +0.00000, +0.00000, +0.00000,
  +0.00000, +0.00000, +0.00000, +0.00000, +0.00000, +0.00000, +0.00000, +0.00000,
  +0.00000, +0.00000, +0.00000, +0.00000, +0.00000, +0.00000, +0.00000, +0.00000,
  +0.00000, +0.00000, +0.00000, +0.00000, +0.00000, +0.00000, +0.00000, +0.00000,
  +0.00000, +0.00000, +0.00000, +0.00000, +0.00000, +0.00000, +0.00000, +0.00000,
  +0.00000, +0.00000, +0.00000, +0.00000, +0.00000, +0.00000, +0.00000, +0.00000,
  +0.00000, +0.00000, +0.00000, +0.00000, +0.00000, +0.00000, +0.00000, +0.00000
};

/****************************************************************************************/
/* Double Step Walking Gait Step Location Vectors - Length 64                           */
/****************************************************************************************/
// Walking Gait Step Location Vectors - Length 64
// Used for Smoother Gait Steps

const PROGMEM float delxyLF_S2_vec[64] = {
  +2.00000, +1.86719, +1.73581, +1.60561, +1.47616, +1.34710, +1.21815, +1.08919,
  +0.96015, +0.83104, +0.70187, +0.57267, +0.44344, +0.31421, +0.18497, +0.05574,
  -0.07346, -0.20259, -0.33161, -0.46048, -0.58921, -0.71791, -0.84684, -0.97653,
  -1.10773, -1.24129, -1.37771, -1.51635, -1.65417, -1.78441, -1.89557, -1.97232,
  -2.00000, -1.97232, -1.89557, -1.78441, -1.65417, -1.51635, -1.37771, -1.24129,
  -1.10773, -0.97653, -0.84684, -0.71791, -0.58922, -0.46049, -0.33161, -0.20258,
  -0.07344, +0.05577, +0.18501, +0.31425, +0.44344, +0.57256, +0.70158, +0.83050,
  +0.95935, +1.08828, +1.21758, +1.34772, +1.47927, +1.61271, +1.74793, +1.88356
};

const PROGMEM float delxyLR_S2_vec[64] = {
  -2.00000, -1.86719, -1.73581, -1.60561, -1.47616, -1.34710, -1.21815, -1.08919,
  -0.96015, -0.83104, -0.70187, -0.57267, -0.44344, -0.31421, -0.18497, -0.05574,
  +0.07346, +0.20259, +0.33161, +0.46048, +0.58921, +0.71791, +0.84684, +0.97653,
  +1.10773, +1.24129, +1.37771, +1.51635, +1.65417, +1.78441, +1.89557, +1.97232,
  +2.00000, +1.97232, +1.89557, +1.78441, +1.65417, +1.51635, +1.37771, +1.24129,
  +1.10773, +0.97653, +0.84684, +0.71791, +0.58922, +0.46049, +0.33161, +0.20258,
  +0.07344, -0.05577, -0.18501, -0.31425, -0.44344, -0.57256, -0.70158, -0.83050,
  -0.95935, -1.08828, -1.21758, -1.34772, -1.47927, -1.61271, -1.74793, -1.88356
};

const PROGMEM float delxyRR_S2_vec[64] = {
  +2.00000, +1.86719, +1.73581, +1.60561, +1.47616, +1.34710, +1.21815, +1.08919,
  +0.96015, +0.83104, +0.70187, +0.57267, +0.44344, +0.31421, +0.18497, +0.05574,
  -0.07346, -0.20259, -0.33161, -0.46048, -0.58921, -0.71791, -0.84684, -0.97653,
  -1.10773, -1.24129, -1.37771, -1.51635, -1.65417, -1.78441, -1.89557, -1.97232,
  -2.00000, -1.97232, -1.89557, -1.78441, -1.65417, -1.51635, -1.37771, -1.24129,
  -1.10773, -0.97653, -0.84684, -0.71791, -0.58922, -0.46049, -0.33161, -0.20258,
  -0.07344, +0.05577, +0.18501, +0.31425, +0.44344, +0.57256, +0.70158, +0.83050,
  +0.95935, +1.08828, +1.21758, +1.34772, +1.47927, +1.61271, +1.74793, +1.88356
};

const PROGMEM float delxyRF_S2_vec[64] = {
  -2.00000, -1.86719, -1.73581, -1.60561, -1.47616, -1.34710, -1.21815, -1.08919,
  -0.96015, -0.83104, -0.70187, -0.57267, -0.44344, -0.31421, -0.18497, -0.05574,
  +0.07346, +0.20259, +0.33161, +0.46048, +0.58921, +0.71791, +0.84684, +0.97653,
  +1.10773, +1.24129, +1.37771, +1.51635, +1.65417, +1.78441, +1.89557, +1.97232,
  +2.00000, +1.97232, +1.89557, +1.78441, +1.65417, +1.51635, +1.37771, +1.24129,
  +1.10773, +0.97653, +0.84684, +0.71791, +0.58922, +0.46049, +0.33161, +0.20258,
  +0.07344, -0.05577, -0.18501, -0.31425, -0.44344, -0.57256, -0.70158, -0.83050,
  -0.95935, -1.08828, -1.21758, -1.34772, -1.47927, -1.61271, -1.74793, -1.88356
};

const PROGMEM float delyawLF_S2_vec[64] = {
  +2.00000, +1.86719, +1.73581, +1.60561, +1.47616, +1.34710, +1.21815, +1.08919,
  +0.96015, +0.83104, +0.70187, +0.57267, +0.44344, +0.31421, +0.18497, +0.05574,
  -0.07346, -0.20259, -0.33161, -0.46048, -0.58921, -0.71791, -0.84684, -0.97653,
  -1.10773, -1.24129, -1.37771, -1.51635, -1.65417, -1.78441, -1.89557, -1.97232,
  -2.00000, -1.97232, -1.89557, -1.78441, -1.65417, -1.51635, -1.37771, -1.24129,
  -1.10773, -0.97653, -0.84684, -0.71791, -0.58922, -0.46049, -0.33161, -0.20258,
  -0.07344, +0.05577, +0.18501, +0.31425, +0.44344, +0.57256, +0.70158, +0.83050,
  +0.95935, +1.08828, +1.21758, +1.34772, +1.47927, +1.61271, +1.74793, +1.88356
};

const PROGMEM float delyawLR_S2_vec[64] = {
  -2.00000, -1.86719, -1.73581, -1.60561, -1.47616, -1.34710, -1.21815, -1.08919,
  -0.96015, -0.83104, -0.70187, -0.57267, -0.44344, -0.31421, -0.18497, -0.05574,
  +0.07346, +0.20259, +0.33161, +0.46048, +0.58921, +0.71791, +0.84684, +0.97653,
  +1.10773, +1.24129, +1.37771, +1.51635, +1.65417, +1.78441, +1.89557, +1.97232,
  +2.00000, +1.97232, +1.89557, +1.78441, +1.65417, +1.51635, +1.37771, +1.24129,
  +1.10773, +0.97653, +0.84684, +0.71791, +0.58922, +0.46049, +0.33161, +0.20258,
  +0.07344, -0.05577, -0.18501, -0.31425, -0.44344, -0.57256, -0.70158, -0.83050,
  -0.95935, -1.08828, -1.21758, -1.34772, -1.47927, -1.61271, -1.74793, -1.88356
};

const PROGMEM float delyawRR_S2_vec[64] = {
  +2.00000, +1.86719, +1.73581, +1.60561, +1.47616, +1.34710, +1.21815, +1.08919,
  +0.96015, +0.83104, +0.70187, +0.57267, +0.44344, +0.31421, +0.18497, +0.05574,
  -0.07346, -0.20259, -0.33161, -0.46048, -0.58921, -0.71791, -0.84684, -0.97653,
  -1.10773, -1.24129, -1.37771, -1.51635, -1.65417, -1.78441, -1.89557, -1.97232,
  -2.00000, -1.97232, -1.89557, -1.78441, -1.65417, -1.51635, -1.37771, -1.24129,
  -1.10773, -0.97653, -0.84684, -0.71791, -0.58922, -0.46049, -0.33161, -0.20258,
  -0.07344, +0.05577, +0.18501, +0.31425, +0.44344, +0.57256, +0.70158, +0.83050,
  +0.95935, +1.08828, +1.21758, +1.34772, +1.47927, +1.61271, +1.74793, +1.88356
};

const PROGMEM float delyawRF_S2_vec[64] = {
  -2.00000, -1.86719, -1.73581, -1.60561, -1.47616, -1.34710, -1.21815, -1.08919,
  -0.96015, -0.83104, -0.70187, -0.57267, -0.44344, -0.31421, -0.18497, -0.05574,
  +0.07346, +0.20259, +0.33161, +0.46048, +0.58921, +0.71791, +0.84684, +0.97653,
  +1.10773, +1.24129, +1.37771, +1.51635, +1.65417, +1.78441, +1.89557, +1.97232,
  +2.00000, +1.97232, +1.89557, +1.78441, +1.65417, +1.51635, +1.37771, +1.24129,
  +1.10773, +0.97653, +0.84684, +0.71791, +0.58922, +0.46049, +0.33161, +0.20258,
  +0.07344, -0.05577, -0.18501, -0.31425, -0.44344, -0.57256, -0.70158, -0.83050,
  -0.95935, -1.08828, -1.21758, -1.34772, -1.47927, -1.61271, -1.74793, -1.88356
};

const PROGMEM float delzLF_S2_vec[64] = {
  +0.00000, +0.00000, +0.00000, +0.00000, +0.00000, +0.00000, +0.00000, +0.00000,
  +0.00000, +0.00000, +0.00000, +0.00000, +0.00000, +0.00000, +0.00000, +0.00000,
  +0.00000, +0.00000, +0.00000, +0.00000, +0.00000, +0.00000, +0.00000, +0.00000,
  +0.00000, +0.00000, +0.00000, +0.00000, +0.00000, +0.00000, +0.00000, +0.00000,
  +0.00000, +0.25000, +0.50000, +0.75000, +1.00000, +1.25000, +1.50000, +1.75000,
  +2.00000, +2.00000, +2.00000, +2.00000, +2.00000, +2.00000, +2.00000, +2.00000,
  +2.00000, +2.00000, +2.00000, +1.75000, +1.50000, +1.25000, +1.00000, +0.75000,
  +0.50000, +0.25000, +0.00000, +0.00000, +0.00000, +0.00000, +0.00000, +0.00000
};

const PROGMEM float delzLR_S2_vec[64] = {
  +0.00000, +0.25000, +0.50000, +0.75000, +1.00000, +1.25000, +1.50000, +1.75000,
  +2.00000, +2.00000, +2.00000, +2.00000, +2.00000, +2.00000, +2.00000, +2.00000,
  +2.00000, +2.00000, +2.00000, +2.00000, +2.00000, +2.00000, +2.00000, +2.00000,
  +2.00000, +1.75000, +1.50000, +1.25000, +1.00000, +0.75000, +0.50000, +0.25000,
  +0.00000, +0.00000, +0.00000, +0.00000, +0.00000, +0.00000, +0.00000, +0.00000,
  +0.00000, +0.00000, +0.00000, +0.00000, +0.00000, +0.00000, +0.00000, +0.00000,
  +0.00000, +0.00000, +0.00000, +0.00000, +0.00000, +0.00000, +0.00000, +0.00000,
  +0.00000, +0.00000, +0.00000, +0.00000, +0.00000, +0.00000, +0.00000, +0.00000
};

const PROGMEM float delzRR_S2_vec[64] = {
  +0.00000, +0.00000, +0.00000, +0.00000, +0.00000, +0.00000, +0.00000, +0.00000,
  +0.00000, +0.00000, +0.00000, +0.00000, +0.00000, +0.00000, +0.00000, +0.00000,
  +0.00000, +0.00000, +0.00000, +0.00000, +0.00000, +0.00000, +0.00000, +0.00000,
  +0.00000, +0.00000, +0.00000, +0.00000, +0.00000, +0.00000, +0.00000, +0.00000,
  +0.00000, +0.25000, +0.50000, +0.75000, +1.00000, +1.25000, +1.50000, +1.75000,
  +2.00000, +2.00000, +2.00000, +2.00000, +2.00000, +2.00000, +2.00000, +2.00000,
  +2.00000, +2.00000, +2.00000, +1.75000, +1.50000, +1.25000, +1.00000, +0.75000,
  +0.50000, +0.25000, +0.00000, +0.00000, +0.00000, +0.00000, +0.00000, +0.00000
};

const PROGMEM float delzRF_S2_vec[64] = {
  +0.00000, +0.25000, +0.50000, +0.75000, +1.00000, +1.25000, +1.50000, +1.75000,
  +2.00000, +2.00000, +2.00000, +2.00000, +2.00000, +2.00000, +2.00000, +2.00000,
  +2.00000, +2.00000, +2.00000, +2.00000, +2.00000, +2.00000, +2.00000, +2.00000,
  +2.00000, +1.75000, +1.50000, +1.25000, +1.00000, +0.75000, +0.50000, +0.25000,
  +0.00000, +0.00000, +0.00000, +0.00000, +0.00000, +0.00000, +0.00000, +0.00000,
  +0.00000, +0.00000, +0.00000, +0.00000, +0.00000, +0.00000, +0.00000, +0.00000,
  +0.00000, +0.00000, +0.00000, +0.00000, +0.00000, +0.00000, +0.00000, +0.00000,
  +0.00000, +0.00000, +0.00000, +0.00000, +0.00000, +0.00000, +0.00000, +0.00000
};

const PROGMEM float delzadj_S2_vec[64] = {
  +0.00000, +0.00000, +0.00000, +0.00000, +0.00000, +0.00000, +0.00000, +0.00000,
  +0.00000, +0.00000, +0.00000, +0.00000, +0.00000, +0.00000, +0.00000, +0.00000,
  +0.00000, +0.00000, +0.00000, +0.00000, +0.00000, +0.00000, +0.00000, +0.00000,
  +0.00000, +0.00000, +0.00000, +0.00000, +0.00000, +0.00000, +0.00000, +0.00000,
  +0.00000, +0.00000, +0.00000, +0.00000, +0.00000, +0.00000, +0.00000, +0.00000,
  +0.00000, +0.00000, +0.00000, +0.00000, +0.00000, +0.00000, +0.00000, +0.00000,
  +0.00000, +0.00000, +0.00000, +0.00000, +0.00000, +0.00000, +0.00000, +0.00000,
  +0.00000, +0.00000, +0.00000, +0.00000, +0.00000, +0.00000, +0.00000, +0.00000
};

/****************************************************************************************/
/* Walking Gait Step Location - State 4 - Length 64                           */
/****************************************************************************************/
const PROGMEM float delxy1_S4_vec[64] = {
  +0.00000, +0.12500, +0.25000, +0.37500, +0.50000, +0.62500, +0.75000, +0.87500,
  +1.00000, +1.12500, +1.25000, +1.37500, +1.50000, +1.62500, +1.75000, +1.87500,
  +2.00000, +1.87500, +1.75000, +1.62500, +1.50000, +1.37500, +1.25000, +1.12500,
  +1.00000, +0.87500, +0.75000, +0.62500, +0.50000, +0.37500, +0.25000, +0.12500,
  +0.00000, -0.12500, -0.25000, -0.37500, -0.50000, -0.62500, -0.75000, -0.87500,
  -1.00000, -1.12500, -1.25000, -1.37500, -1.50000, -1.62500, -1.75000, -1.87500,
  -2.00000, -1.87500, -1.75000, -1.62500, -1.50000, -1.37500, -1.25000, -1.12500,
  -1.00000, -0.87500, -0.75000, -0.62500, -0.50000, -0.37500, -0.25000, -0.12500
};

const PROGMEM float delxy2_S4_vec[64] = {
  -0.00000, -0.12500, -0.25000, -0.37500, -0.50000, -0.62500, -0.75000, -0.87500,
  -1.00000, -1.12500, -1.25000, -1.37500, -1.50000, -1.62500, -1.75000, -1.87500,
  -2.00000, -1.87500, -1.75000, -1.62500, -1.50000, -1.37500, -1.25000, -1.12500,
  -1.00000, -0.87500, -0.75000, -0.62500, -0.50000, -0.37500, -0.25000, -0.12500,
  +0.00000, +0.12500, +0.25000, +0.37500, +0.50000, +0.62500, +0.75000, +0.87500,
  +1.00000, +1.12500, +1.25000, +1.37500, +1.50000, +1.62500, +1.75000, +1.87500,
  +2.00000, +1.87500, +1.75000, +1.62500, +1.50000, +1.37500, +1.25000, +1.12500,
  +1.00000, +0.87500, +0.75000, +0.62500, +0.50000, +0.37500, +0.25000, +0.12500
};

const PROGMEM float delxy3_S4_vec[64] = {
  +0.00000, +0.12500, +0.25000, +0.37500, +0.50000, +0.62500, +0.75000, +0.87500,
  +1.00000, +1.12500, +1.25000, +1.37500, +1.50000, +1.62500, +1.75000, +1.87500,
  +2.00000, +1.87500, +1.75000, +1.62500, +1.50000, +1.37500, +1.25000, +1.12500,
  +1.00000, +0.87500, +0.75000, +0.62500, +0.50000, +0.37500, +0.25000, +0.12500,
  +0.00000, -0.12500, -0.25000, -0.37500, -0.50000, -0.62500, -0.75000, -0.87500,
  -1.00000, -1.12500, -1.25000, -1.37500, -1.50000, -1.62500, -1.75000, -1.87500,
  -2.00000, -1.87500, -1.75000, -1.62500, -1.50000, -1.37500, -1.25000, -1.12500,
  -1.00000, -0.87500, -0.75000, -0.62500, -0.50000, -0.37500, -0.25000, -0.12500
};

const PROGMEM float delxy4_S4_vec[64] = {
  -0.00000, -0.12500, -0.25000, -0.37500, -0.50000, -0.62500, -0.75000, -0.87500,
  -1.00000, -1.12500, -1.25000, -1.37500, -1.50000, -1.62500, -1.75000, -1.87500,
  -2.00000, -1.87500, -1.75000, -1.62500, -1.50000, -1.37500, -1.25000, -1.12500,
  -1.00000, -0.87500, -0.75000, -0.62500, -0.50000, -0.37500, -0.25000, -0.12500,
  +0.00000, +0.12500, +0.25000, +0.37500, +0.50000, +0.62500, +0.75000, +0.87500,
  +1.00000, +1.12500, +1.25000, +1.37500, +1.50000, +1.62500, +1.75000, +1.87500,
  +2.00000, +1.87500, +1.75000, +1.62500, +1.50000, +1.37500, +1.25000, +1.12500,
  +1.00000, +0.87500, +0.75000, +0.62500, +0.50000, +0.37500, +0.25000, +0.12500
};

const PROGMEM float delyaw1_S4_vec[64] = {
  +0.00000, +0.12500, +0.25000, +0.37500, +0.50000, +0.62500, +0.75000, +0.87500,
  +1.00000, +1.12500, +1.25000, +1.37500, +1.50000, +1.62500, +1.75000, +1.87500,
  +2.00000, +1.87500, +1.75000, +1.62500, +1.50000, +1.37500, +1.25000, +1.12500,
  +1.00000, +0.87500, +0.75000, +0.62500, +0.50000, +0.37500, +0.25000, +0.12500,
  +0.00000, -0.12500, -0.25000, -0.37500, -0.50000, -0.62500, -0.75000, -0.87500,
  -1.00000, -1.12500, -1.25000, -1.37500, -1.50000, -1.62500, -1.75000, -1.87500,
  -2.00000, -1.87500, -1.75000, -1.62500, -1.50000, -1.37500, -1.25000, -1.12500,
  -1.00000, -0.87500, -0.75000, -0.62500, -0.50000, -0.37500, -0.25000, -0.12500
};

const PROGMEM float delyaw2_S4_vec[64] = {
  -0.00000, -0.12500, -0.25000, -0.37500, -0.50000, -0.62500, -0.75000, -0.87500,
  -1.00000, -1.12500, -1.25000, -1.37500, -1.50000, -1.62500, -1.75000, -1.87500,
  -2.00000, -1.87500, -1.75000, -1.62500, -1.50000, -1.37500, -1.25000, -1.12500,
  -1.00000, -0.87500, -0.75000, -0.62500, -0.50000, -0.37500, -0.25000, -0.12500,
  +0.00000, +0.12500, +0.25000, +0.37500, +0.50000, +0.62500, +0.75000, +0.87500,
  +1.00000, +1.12500, +1.25000, +1.37500, +1.50000, +1.62500, +1.75000, +1.87500,
  +2.00000, +1.87500, +1.75000, +1.62500, +1.50000, +1.37500, +1.25000, +1.12500,
  +1.00000, +0.87500, +0.75000, +0.62500, +0.50000, +0.37500, +0.25000, +0.12500
};

const PROGMEM float delyaw3_S4_vec[64] = {
  +0.00000, +0.12500, +0.25000, +0.37500, +0.50000, +0.62500, +0.75000, +0.87500,
  +1.00000, +1.12500, +1.25000, +1.37500, +1.50000, +1.62500, +1.75000, +1.87500,
  +2.00000, +1.87500, +1.75000, +1.62500, +1.50000, +1.37500, +1.25000, +1.12500,
  +1.00000, +0.87500, +0.75000, +0.62500, +0.50000, +0.37500, +0.25000, +0.12500,
  +0.00000, -0.12500, -0.25000, -0.37500, -0.50000, -0.62500, -0.75000, -0.87500,
  -1.00000, -1.12500, -1.25000, -1.37500, -1.50000, -1.62500, -1.75000, -1.87500,
  -2.00000, -1.87500, -1.75000, -1.62500, -1.50000, -1.37500, -1.25000, -1.12500,
  -1.00000, -0.87500, -0.75000, -0.62500, -0.50000, -0.37500, -0.25000, -0.12500
};

const PROGMEM float delyaw4_S4_vec[64] = {
  -0.00000, -0.12500, -0.25000, -0.37500, -0.50000, -0.62500, -0.75000, -0.87500,
  -1.00000, -1.12500, -1.25000, -1.37500, -1.50000, -1.62500, -1.75000, -1.87500,
  -2.00000, -1.87500, -1.75000, -1.62500, -1.50000, -1.37500, -1.25000, -1.12500,
  -1.00000, -0.87500, -0.75000, -0.62500, -0.50000, -0.37500, -0.25000, -0.12500,
  +0.00000, +0.12500, +0.25000, +0.37500, +0.50000, +0.62500, +0.75000, +0.87500,
  +1.00000, +1.12500, +1.25000, +1.37500, +1.50000, +1.62500, +1.75000, +1.87500,
  +2.00000, +1.87500, +1.75000, +1.62500, +1.50000, +1.37500, +1.25000, +1.12500,
  +1.00000, +0.87500, +0.75000, +0.62500, +0.50000, +0.37500, +0.25000, +0.12500
};

const PROGMEM float delz1_S4_vec[64] = {
  +2.00000, +2.00000, +2.00000, +2.00000, +2.00000, +2.00000, +2.00000, +2.00000,
  +2.00000, +1.75000, +1.50000, +1.25000, +1.00000, +0.75000, +0.50000, +0.25000,
  +0.00000, +0.00000, +0.00000, +0.00000, +0.00000, +0.00000, +0.00000, +0.00000,
  +0.00000, +0.00000, +0.00000, +0.00000, +0.00000, +0.00000, +0.00000, +0.00000,
  +0.00000, +0.00000, +0.00000, +0.00000, +0.00000, +0.00000, +0.00000, +0.00000,
  +0.00000, +0.00000, +0.00000, +0.00000, +0.00000, +0.00000, +0.00000, +0.00000,
  +0.00000, +0.25000, +0.50000, +0.75000, +1.00000, +1.25000, +1.50000, +1.75000,
  +2.00000, +2.00000, +2.00000, +2.00000, +2.00000, +2.00000, +2.00000, +2.00000
};

const PROGMEM float delz2_S4_vec[64] = {
  +0.00000, +0.00000, +0.00000, +0.00000, +0.00000, +0.00000, +0.00000, +0.00000,
  +0.00000, +0.00000, +0.00000, +0.00000, +0.00000, +0.00000, +0.00000, +0.00000,
  +0.00000, +0.25000, +0.50000, +0.75000, +1.00000, +1.25000, +1.50000, +1.75000,
  +2.00000, +2.00000, +2.00000, +2.00000, +2.00000, +2.00000, +2.00000, +2.00000,
  +2.00000, +2.00000, +2.00000, +2.00000, +2.00000, +2.00000, +2.00000, +2.00000,
  +2.00000, +1.75000, +1.50000, +1.25000, +1.00000, +0.75000, +0.50000, +0.25000,
  +0.00000, +0.00000, +0.00000, +0.00000, +0.00000, +0.00000, +0.00000, +0.00000,
  +0.00000, +0.00000, +0.00000, +0.00000, +0.00000, +0.00000, +0.00000, +0.00000
};

const PROGMEM float delz3_S4_vec[64] = {
  +2.00000, +2.00000, +2.00000, +2.00000, +2.00000, +2.00000, +2.00000, +2.00000,
  +2.00000, +1.75000, +1.50000, +1.25000, +1.00000, +0.75000, +0.50000, +0.25000,
  +0.00000, +0.00000, +0.00000, +0.00000, +0.00000, +0.00000, +0.00000, +0.00000,
  +0.00000, +0.00000, +0.00000, +0.00000, +0.00000, +0.00000, +0.00000, +0.00000,
  +0.00000, +0.00000, +0.00000, +0.00000, +0.00000, +0.00000, +0.00000, +0.00000,
  +0.00000, +0.00000, +0.00000, +0.00000, +0.00000, +0.00000, +0.00000, +0.00000,
  +0.00000, +0.25000, +0.50000, +0.75000, +1.00000, +1.25000, +1.50000, +1.75000,
  +2.00000, +2.00000, +2.00000, +2.00000, +2.00000, +2.00000, +2.00000, +2.00000
};

const PROGMEM float delz4_S4_vec[64] = {
  +0.00000, +0.00000, +0.00000, +0.00000, +0.00000, +0.00000, +0.00000, +0.00000,
  +0.00000, +0.00000, +0.00000, +0.00000, +0.00000, +0.00000, +0.00000, +0.00000,
  +0.00000, +0.25000, +0.50000, +0.75000, +1.00000, +1.25000, +1.50000, +1.75000,
  +2.00000, +2.00000, +2.00000, +2.00000, +2.00000, +2.00000, +2.00000, +2.00000,
  +2.00000, +2.00000, +2.00000, +2.00000, +2.00000, +2.00000, +2.00000, +2.00000,
  +2.00000, +1.75000, +1.50000, +1.25000, +1.00000, +0.75000, +0.50000, +0.25000,
  +0.00000, +0.00000, +0.00000, +0.00000, +0.00000, +0.00000, +0.00000, +0.00000,
  +0.00000, +0.00000, +0.00000, +0.00000, +0.00000, +0.00000, +0.00000, +0.00000
};

const PROGMEM float delzadj_S4_vec[64] = {
  +0.00000, +0.00000, +0.00000, +0.00000, +0.00000, +0.00000, +0.00000, +0.00000,
  +0.00000, +0.00000, +0.00000, +0.00000, +0.00000, +0.00000, +0.00000, +0.00000,
  +0.00000, +0.00000, +0.00000, +0.00000, +0.00000, +0.00000, +0.00000, +0.00000,
  +0.00000, +0.00000, +0.00000, +0.00000, +0.00000, +0.00000, +0.00000, +0.00000,
  +0.00000, +0.00000, +0.00000, +0.00000, +0.00000, +0.00000, +0.00000, +0.00000,
  +0.00000, +0.00000, +0.00000, +0.00000, +0.00000, +0.00000, +0.00000, +0.00000,
  +0.00000, +0.00000, +0.00000, +0.00000, +0.00000, +0.00000, +0.00000, +0.00000,
  +0.00000, +0.00000, +0.00000, +0.00000, +0.00000, +0.00000, +0.00000, +0.00000
};


/****************************************************************************************/
/* Mech Global Variable Initialization                                                  */
/****************************************************************************************/
void initMech() {
  memcpy(XFT         , XFTS2          , sizeXFT);         // Gait X Foot Home Locations
  memcpy(YFT         , YFTS2          , sizeYFT);         // Gait Y Foot Home Locations
  memcpy(ZFT         , ZFTS2          , sizeZFT);         // Gait Z Foot Home Locations
  memcpy(delxyLF_vec , delxyLF_S2_vec , sizedelxy);
  memcpy(delxyLR_vec , delxyLR_S2_vec , sizedelxy);
  memcpy(delxyRR_vec , delxyRR_S2_vec , sizedelxy);
  memcpy(delxyRF_vec , delxyRF_S2_vec , sizedelxy);
  memcpy(delyawLF_vec, delyawLF_S2_vec, sizedelyaw);
  memcpy(delyawLR_vec, delyawLR_S2_vec, sizedelyaw);
  memcpy(delyawRR_vec, delyawRR_S2_vec, sizedelyaw);
  memcpy(delyawRF_vec, delyawRF_S2_vec, sizedelyaw);
  memcpy(delzLF_vec  , delzLF_S2_vec  , sizedelz);
  memcpy(delzLR_vec  , delzLR_S2_vec  , sizedelz);
  memcpy(delzRR_vec  , delzRR_S2_vec  , sizedelz);
  memcpy(delzRF_vec  , delzRF_S2_vec  , sizedelz);
  memcpy(delzadj_vec , delzadj_S2_vec , sizedelzadj);

  float XFT[4] = {XSH[0] + cos45 * LFTF, XSH[1] - cos45 * LFTR, XSH[2] - cos45 * LFTR, XSH[3] + cos45 * LFTF};
  float YFT[4] = {YSH[0] + sin45 * LFTF, YSH[1] + sin45 * LFTR, YSH[2] - sin45 * LFTR, YSH[3] - sin45 * LFTF};
  float ZFT[4] = {0.0F, 0.0F, 0.0F, 0.0F};

  for (int i = 0; i < sizeTmBuffer; i++) {
    comTmBuffer[i] = 0;
  }
}
/****************************************************************************************/
/* End Mech Global Header                                                               */
/****************************************************************************************/
#endif
